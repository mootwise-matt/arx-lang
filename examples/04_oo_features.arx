// ARX Object-Oriented Features Example
// Demonstrates: Classes, inheritance, constructors, methods, field access
module OOFeaturesDemo;

class App
  procedure Main
  begin
    system.writeln('=== ARX Object-Oriented Features Demo ===');
    
    // Test 1: Basic Object Creation and Method Calls
    system.writeln('');
    system.writeln('=== Test 1: Basic Object Creation and Method Calls ===');
    Person person1;
    person1 = new Person;
    
    system.writeln('Person 1 created successfully');
    system.writeln('Person 1 name: ' + person1.getName());
    system.writeln('Person 1 age: ' + person1.getAge());
    
    // Test 2: Multiple Object Instances
    system.writeln('');
    system.writeln('=== Test 2: Multiple Object Instances ===');
    Person person2;
    person2 = new Person;
    
    system.writeln('Person 2 created successfully');
    system.writeln('Person 2 name: ' + person2.getName());
    system.writeln('Person 2 age: ' + person2.getAge());
    
    // Test 3: Method Call Chaining and Complex Expressions
    system.writeln('');
    system.writeln('=== Test 3: Method Call Chaining and Complex Expressions ===');
    system.writeln('Person 1 info: ' + person1.getName() + ', age ' + person1.getAge());
    system.writeln('Person 2 info: ' + person2.getName() + ', age ' + person2.getAge());
    
    // Test 4: Inheritance - Student Class
    system.writeln('');
    system.writeln('=== Test 4: Inheritance - Student Class ===');
    Student student1;
    student1 = new Student;
    
    system.writeln('Student 1 created successfully');
    system.writeln('Student 1 name: ' + student1.getName());
    system.writeln('Student 1 age: ' + student1.getAge());
    system.writeln('Student 1 major: ' + student1.getMajor());
    
    // Test 5: Multiple Student Instances
    system.writeln('');
    system.writeln('=== Test 5: Multiple Student Instances ===');
    Student student2;
    student2 = new Student;
    
    system.writeln('Student 2 created successfully');
    system.writeln('Student 2 name: ' + student2.getName());
    system.writeln('Student 2 age: ' + student2.getAge());
    system.writeln('Student 2 major: ' + student2.getMajor());
    
    // Test 6: Mixed Object Types
    system.writeln('');
    system.writeln('=== Test 6: Mixed Object Types ===');
    system.writeln('Person 1: ' + person1.getName() + ', age ' + person1.getAge());
    system.writeln('Student 1: ' + student1.getName() + ', age ' + student1.getAge() + ', major ' + student1.getMajor());
    system.writeln('Person 2: ' + person2.getName() + ', age ' + person2.getAge());
    system.writeln('Student 2: ' + student2.getName() + ', age ' + student2.getAge() + ', major ' + student2.getMajor());
    
    // Test 7: Method Call Variations
    system.writeln('');
    system.writeln('=== Test 7: Method Call Variations ===');
    system.writeln('Testing different method call patterns...');
    
    // Simple method calls
    system.writeln('Simple getName(): ' + person1.getName());
    system.writeln('Simple getAge(): ' + person1.getAge());
    
    // Method calls in expressions
    system.writeln('Method in expression: ' + student1.getName() + ' is ' + student1.getAge() + ' years old');
    
    // Test 8: Field Access and Method Calls
    system.writeln('');
    system.writeln('=== Test 8: Field Access and Method Calls ===');
    system.writeln('Testing field access through methods...');
    system.writeln('Person 1 name field via method: ' + person1.getName());
    system.writeln('Student 1 major field via method: ' + student1.getMajor());
    
    // Test 9: Constructor Testing
    system.writeln('');
    system.writeln('=== Test 9: Constructor Testing ===');
    system.writeln('Testing constructors (init methods)...');
    system.writeln('Person constructor sets: name=' + person1.getName() + ', age=' + person1.getAge());
    system.writeln('Student constructor sets: name=' + student1.getName() + ', age=' + student1.getAge() + ', major=' + student1.getMajor());
    
    // Test 10: Complex Object Interactions
    system.writeln('');
    system.writeln('=== Test 10: Complex Object Interactions ===');
    system.writeln('Testing complex object interactions...');
    system.writeln('Person 1: ' + person1.getName() + ' (' + person1.getAge() + ')');
    system.writeln('Person 2: ' + person2.getName() + ' (' + person2.getAge() + ')');
    system.writeln('Student 1: ' + student1.getName() + ' (' + student1.getAge() + ') - ' + student1.getMajor());
    system.writeln('Student 2: ' + student2.getName() + ' (' + student2.getAge() + ') - ' + student2.getMajor());
    
    system.writeln('');
    system.writeln('=== All OO Features Tests Complete ===');
    system.writeln('Total objects created: 4 (2 Person, 2 Student)');
    system.writeln('Total method calls: 16+');
    system.writeln('Inheritance tested: Student extends Person');
    system.writeln('Method resolution tested: getName, getAge, getMajor');
  end;
end;

// Base class: Person
class Person
  string name;
  integer age;
  
  // Constructor
  procedure init
  begin
    name = "Unknown";
    age = 0;
  end;
  
  // Getter methods
  function getName : string
  begin
    return name;
  end;
  
  function getAge : integer
  begin
    return age;
  end;
  
  // Setter methods (parameters not yet implemented)
  procedure setName(string personname)
  begin
    name = personname;
  end;
  
  procedure setAge
  begin
    age = 25;
  end;
end;

// Derived class: Student extends Person
class Student extends Person
  string major;
  
  // Constructor
  procedure init
  begin
    name = "Student";
    age = 18;
    major = "Undeclared";
  end;
  
  // Additional getter method
  function getMajor : string
  begin
    return major;
  end;
  
  // Additional setter method (parameters not yet implemented)
  procedure setMajor
  begin
    major = "Updated Major";
  end;
end;
