// ARX Control Statements Example
// Demonstrates: FOR loops, comparison operators, logical operators
module ControlStatementsDemo;

class App
  procedure Main
  begin
    writeln('=== ARX Control Statements Demo ===');
    writeln('');
    
    // FOR Loop demonstration
    writeln('=== FOR Loop Example ===');
    writeln('Counting from 1 to 5:');
    
    for i = 1 to 5 do
    begin
      writeln('Loop iteration: ' + i);
    end;
    
    writeln('');
    
    // FOR Loop with arithmetic
    writeln('=== FOR Loop with Arithmetic ===');
    writeln('Calculating squares from 1 to 4:');
    
    for num = 1 to 4 do
    begin
      integer square;
      square = num * num;
      writeln('Square of ' + num + ' = ' + square);
    end;
    
    writeln('');
    
    // Comparison operators
    writeln('=== Comparison Operators ===');
    integer x;
    integer y;
    x = 10;
    y = 20;
    
    writeln('x = ' + x + ', y = ' + y);
    writeln('Comparison expressions:');
    writeln('x == y would be: ' + x + ' == ' + y);
    writeln('x != y would be: ' + x + ' != ' + y);
    writeln('x < y would be: ' + x + ' < ' + y);
    writeln('x > y would be: ' + x + ' > ' + y);
    writeln('x <= y would be: ' + x + ' <= ' + y);
    writeln('x >= y would be: ' + x + ' >= ' + y);
    
    writeln('');
    
    // Logical operators (boolean literals not yet implemented)
    writeln('=== Logical Operators ===');
    writeln('Note: Boolean literals (true/false) are planned but not yet implemented');
    writeln('Logical operators (and, or, not) will work with boolean expressions');
    
    writeln('');
    
    // Arithmetic expressions for control flow
    writeln('=== Arithmetic for Control Flow ===');
    integer counter;
    counter = 1;
    writeln('Counter starts at: ' + counter);
    
    counter = counter + 1;
    writeln('Counter after increment: ' + counter);
    
    counter = counter * 2;
    writeln('Counter after doubling: ' + counter);
    
  writeln('');
  
  // WHILE Loop demonstration
  writeln('=== WHILE Loop Example ===');
  writeln('Basic WHILE loop (runs once):');
  
  integer while_counter;
  while_counter = 1;
  
  while while_counter do
  begin
    writeln('WHILE loop iteration: ' + while_counter);
    while_counter = 0;  // Exit condition
  end;
  
  writeln('');
  writeln('=== Control Statements Demo Complete ===');
  writeln('FOR loops are fully working! Both loop termination and body execution are working correctly.');
  writeln('WHILE loops are working for basic conditions (variables, literals).');
  writeln('Note: Comparison operators (<, <=, >, >=) in expressions are planned for future implementation.');
  writeln('IF statements are planned for future implementation.');
  end;
end;
